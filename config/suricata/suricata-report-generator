#!/usr/bin/python3
###############################################################################
#                                                                             #
# IPFire.org - A linux based firewall                                         #
# Copyright (C) 2025  Michael Tremer                                          #
#                                                                             #
# This program is free software: you can redistribute it and/or modify        #
# it under the terms of the GNU General Public License as published by        #
# the Free Software Foundation, either version 3 of the License, or           #
# (at your option) any later version.                                         #
#                                                                             #
# This program is distributed in the hope that it will be useful,             #
# but WITHOUT ANY WARRANTY; without even the implied warranty of              #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the               #
# GNU General Public License for more details.                                #
#                                                                             #
# You should have received a copy of the GNU General Public License           #
# along with this program.  If not, see <http://www.gnu.org/licenses/>.       #
#                                                                             #
###############################################################################

import argparse
import calendar
import datetime
import logging
import sqlite3

log = logging.getLogger("suricata-report-generator")
log.setLevel(logging.DEBUG)

# i18n
_ = lambda x: x

class ReportGenerator(object):
	"""
		This is the main class that handles all the things...
	"""
	def __init__(self, path):
		self.path = path

		# Open the database
		self.db = sqlite3.connect(path)

	def generate(self, output, year, month, week, day):
		"""
			Generates a PDF report.
		"""
		log.debug("Generating report %s..." % output)

		today = datetime.date.today()

		# Daily reports
		if year and month and day:
			try:
				date = datetime.date(year, month, day)
			except ValueError as e:
				log.error("Invalid date: %s-%s-%s" % (year, month, day))
				raise SystemExit(2)

			# Start and end date are the same day
			date_start = date_end = date

		# Monthly reports
		elif year and month:
			date_start = datetime.date(year, month, 1)

			# Determine the last day
			first_weekday, last_day = calendar.monthrange(year, month)
			date_end = datetime.date(year, month, last_day)

			# Cap to today
			date_end = min(date_end, today)

		# Weekly reports
		elif year and week:
			date_start = datetime.date.fromisocalendar(year, week, 1)
			date_end   = datetime.date.fromisocalendar(year, week, 7)

			# Cap to today
			date_end = min(date_end, today)

		# Yearly reports
		elif year:
			date_start = datetime.date(year, 1, 1)
			date_end   = datetime.date(year, 12, 31)

			# Cap to today
			date_end = min(date_end, today)

		# Log the dates
		log.debug("  Dates: %s - %s" % (date_start, date_end))


def setup_logging(loglevel=logging.INFO):
	log.setLevel(loglevel)

	# Write everything to the console
	handler = logging.StreamHandler()
	log.addHandler(handler)

	handler.setLevel(loglevel)

	return log

def main():
	parser = argparse.ArgumentParser(description="Reporter Generator for Suricata")

	# Command Line Arguments
	parser.add_argument("--verbose", "-v", action="count", help="Be more verbose")
	parser.add_argument("--database", help="Database",
		default="/var/log/suricata/reporter.db")
	parser.add_argument("--output", "-o", required=True, help=_("Output Path"))

	# Select the time
	parser.add_argument("--year", type=int, required=True,
		help=_("Year of the report (e.g. 2025)"))
	parser.add_argument("--month", type=int, choices=range(1, 13),
		help=_("Month of the report (1-12)"))

	# We can only use --week or --day, but never both
	group = parser.add_mutually_exclusive_group()
	group.add_argument("--day", type=int, choices=range(1, 32),
		help=_("Day of the month (1-31)"))
	group.add_argument("--week", type=int, choices=range(1, 54),
		help=_("ISO calendar week number (1-53)"))

	# Parse command line arguments
	args = parser.parse_args()

	# Setup logging
	loglevel = logging.WARN

	if args.verbose:
		if args.verbose == 1:
			loglevel = logging.INFO
		elif args.verbose >= 2:
			loglevel = logging.DEBUG

	setup_logging(loglevel=loglevel)

	# Create the report
	generator = ReportGenerator(args.database)

	# Generate!
	generator.generate(
		output = args.output,
		year   = args.year,
		month  = args.month,
		week   = args.week,
		day    = args.day,
	)

if __name__ == "__main__":
	main()
