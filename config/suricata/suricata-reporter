#!/usr/bin/python3
###############################################################################
#                                                                             #
# IPFire.org - A linux based firewall                                         #
# Copyright (C) 2025  Michael Tremer                                          #
#                                                                             #
# This program is free software: you can redistribute it and/or modify        #
# it under the terms of the GNU General Public License as published by        #
# the Free Software Foundation, either version 3 of the License, or           #
# (at your option) any later version.                                         #
#                                                                             #
# This program is distributed in the hope that it will be useful,             #
# but WITHOUT ANY WARRANTY; without even the implied warranty of              #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the               #
# GNU General Public License for more details.                                #
#                                                                             #
# You should have received a copy of the GNU General Public License           #
# along with this program.  If not, see <http://www.gnu.org/licenses/>.       #
#                                                                             #
###############################################################################

import argparse
import asyncio
import logging
import logging.handlers
import multiprocessing
import os
import signal
import socket
import sys

SOCKET_PATH = "/var/run/suricata/reporter.socket"

log = logging.getLogger("suricata-reporter")
log.setLevel(logging.DEBUG)

class Reporter(object):
	"""
		This is the main class that handles all the things...
	"""
	def __init__(self):
		# Fetch CPU count
		cpu_count = multiprocessing.cpu_count()

		# Fetch the current event loop
		self.loop = asyncio.get_running_loop()

		# Have we terminated?
		self.is_terminated = asyncio.Event()

		# Create an events queue
		self.queue = multiprocessing.Queue(1024)

		# Create as many workers as we have processors
		self.workers = [
			Worker(reporter=self) for _ in range(cpu_count)
		]

		# Register any signals
		for signo in (signal.SIGINT, signal.SIGTERM):
			self.loop.add_signal_handler(signo, self.terminate)

		# Create the socket
		self.sock = self._create_socket()

	def _create_socket(self):
		"""
			Creates a new socket to receive messages on
		"""
		# Create a new, non-blocking UNIX datagram socket
		sock = socket.socket(socket.AF_UNIX, socket.SOCK_DGRAM|socket.SOCK_NONBLOCK)

		# Bind to the some path
		try:
			sock.bind(SOCKET_PATH)
		except OSError as e:
			log.error("Failed to bind to socket: %s" % e)

			# Terminate immediately
			raise SystemExit(1)

		# Call something whenever we receive data on the socket
		self.loop.add_reader(sock.fileno(), self._receive_message, sock)

		# Return the socket
		return sock

	async def run(self):
		"""
			The main loop of the application.
		"""
		log.debug("Starting reporter...")

		# Start all workers
		for worker in self.workers:
			worker.start()

		# Wait until we have terminated
		await self.is_terminated.wait()

		log.debug("Reporter has exited")

	def terminate(self):
		"""
			Called when the reporter is supposed to terminate.
		"""
		log.debug("Terminating...")

		# We are no longer running
		self.is_terminated.set()

		# Remove the socket so we won't receive any more data
		try:
			os.unlink(SOCKET_PATH)
		except OSError as e:
			log.error("Failed to remove %s: %s" % (SOCKET_PATH, e))

		# Close the queue
		self.queue.close()

		# Terminate all workers
		for worker in self.workers:
			worker.terminate()

		# Wait until all workers have terminated
		for worker in self.workers:
			worker.join()

	def _receive_message(self, sock):
		"""
			Called when there is some socket activity.

			It will read the entire datagram and push it into the queue.
		"""
		# Read the data from the socket
		data, _ = sock.recvfrom(65535)

		# Push the data straight into the queue
		try:
			self.queue.put(data, block=False)

		# Log a message if the queue is full
		except queue.Full as e:
			log.warning("Failed to push event into the queue. The queue seems to be full.")


class Worker(multiprocessing.Process):
	def __init__(self, reporter):
		super().__init__()

		# Store the reporter
		self.reporter = reporter

	def run(self):
		"""
			This is the main entry point for workers...
		"""
		log.debug("Worker %s launched" % self.pid)

		# Reset signal handlers
		for signo in (signal.SIGINT, signal.SIGTERM):
			signal.signal(signo, signal.SIG_DFL)

		# Loop for forever
		while True:
			try:
				event = self.reporter.queue.get(block=True)

			# If the queue has been closed, we immediately exit
			except ValueError:
				break

			# Log the event
			log.debug("Received event in worker %s: %s" % (self.pid, event))

		log.debug("Worker %s terminated" % self.pid)


def setup_logging(loglevel=logging.INFO):
	log.setLevel(loglevel)

	# Log to syslog by default
	handler = logging.handlers.SysLogHandler(address="/dev/log", facility="daemon")
	log.addHandler(handler)

	# Format everything
	formatter = logging.Formatter("%(name)s[%(process)d]: %(message)s")
	handler.setFormatter(formatter)

	handler.setLevel(loglevel)

	# Write everything to the console, too
	handler = logging.StreamHandler()
	log.addHandler(handler)

	handler.setLevel(loglevel)

	return log

async def main():
	parser = argparse.ArgumentParser(description="Reporter Service for Suricata")

	# Command Line Arguments
	parser.add_argument("--verbose", "-v", action="count", help="Be more verbose")

	# Parse command line arguments
	args = parser.parse_args()

	# Setup logging
	loglevel = logging.WARN

	if args.verbose:
		if args.verbose == 1:
			loglevel = logging.INFO
		elif args.verbose >= 2:
			loglevel = logging.DEBUG

	setup_logging(loglevel=loglevel)

	# Create the repoert
	reporter = Reporter()

	# Run!
	await reporter.run()

if __name__ == "__main__":
	asyncio.run(main())
